/*
 * Copyright 2016 the original author or authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package ai.lana.demo;

import java.util.Collection;
import ws.salient.chat.Intent;
import ws.salient.chat.Message;
import ws.salient.chat.Render;
import ws.salient.chat.Chat;
import java.util.Map;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import org.jbpm.ruleflow.instance.RuleFlowProcessInstance;
import ai.lana.aws.cloudwatch.MetricAlarm;
import ai.lana.aws.cloudwatch.MetricAlarm.State;
import ai.lana.aws.cloudwatch.MetricAlarm.Comparison;
import ai.lana.aws.cloudwatch.MetricValue;
import ai.lana.aws.cloudwatch.Metric;
import ai.lana.aws.dynamodb.Table;
import ai.lana.aws.lambda.Function;
import java.util.TreeSet;
import org.kie.api.time.SessionClock;

global Chat chat;
global Metrics metrics;
global SessionClock clock;

rule "SetInvocations"
    salience 100
when
    not MetricValue()
then
    insert(new MetricValue()
        .withMetric(new Metric()
            .withNamespace("Lambda")
            .withMetricName("Invocations")
            .withDimension("FunctionName", "getproducts"))
        .withSum(75L)
        .withTimestamp(clock.getCurrentTime()));
end

rule "SetAlarms"
    salience 100
when
    not MetricAlarm()
then
    insert(new MetricAlarm()
        .withMetric(new Metric()
            .withNamespace("Lambda")
            .withMetricName("Errors")
            .withDimension("FunctionName", "getproducts"))
        .withStateValue(State.OK)
        .withThreshold(2L));
    insert(new MetricAlarm()
        .withMetric(new Metric()
            .withNamespace("DynamoDB")
            .withMetricName("ConsumedReadCapacityUnits")
            .withDimension("TableName", "product"))
        .withComparison(Comparison.GREATER_THAN)
        .withThreshold(105L));
end


rule "UpdateProductMetricValues"
    salience 100
when
    value: MetricValue(metric.namespace == "Lambda", metric.metricName == "Invocations", metric.getDimensions().get("FunctionName") == "getproducts")
    not MetricValue(metric.namespace == "DynamoDB", timestamp == value.timestamp)
    table: Table(tableName == "product")
then
    metrics.newMetrics(value, table);
end
